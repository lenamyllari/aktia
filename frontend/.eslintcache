[{"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\index.js":"1","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementService.js":"3","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\App.js":"4","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\CustomerList.js":"5","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementList.js":"6","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementServiceList.js":"7","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Agreement.js":"8","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Customer.js":"9","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AppNavBar.js":"10","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\CustomerEdit.js":"11","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Home.js":"12"},{"size":500,"mtime":1611766916188,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1611766916188,"results":"15","hashOfConfig":"14"},{"size":293,"mtime":1612008129171,"results":"16","hashOfConfig":"14"},{"size":952,"mtime":1612105419315,"results":"17","hashOfConfig":"14"},{"size":1986,"mtime":1612105817499,"results":"18","hashOfConfig":"14"},{"size":2138,"mtime":1612105817480,"results":"19","hashOfConfig":"14"},{"size":2126,"mtime":1612105817457,"results":"20","hashOfConfig":"14"},{"size":3916,"mtime":1612108346969,"results":"21","hashOfConfig":"14"},{"size":2497,"mtime":1612105817411,"results":"22","hashOfConfig":"14"},{"size":1542,"mtime":1612078126786,"results":"23","hashOfConfig":"14"},{"size":2818,"mtime":1612035741910,"results":"24","hashOfConfig":"14"},{"size":238,"mtime":1612035234854,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1bado01",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\index.js",[],["56","57"],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementService.js",[],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\App.js",["58"],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\CustomerList.js",["59","60"],"import React, {Component} from 'react';\r\nimport { Container, Table } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default class  CustomerList extends Component  {\r\n\r\n    state= {\r\n        customers: [],\r\n        isLoading: false,\r\n\t};\r\n\r\n   componentDidMount() {\r\n        this.setState({isLoading: true});\r\n        fetch('/api/customers')\r\n            .then(response => response.json())\r\n            .then(data => this.setState({customers: data, isLoading: false}));\r\n    }\r\n\r\n    async remove(id) {\r\n        await fetch(`/api/customer/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(() => {\r\n            let updatedCustomers = [...this.state.customers].filter(i => i.id !== id);\r\n            this.setState({customers: updatedCustomers});\r\n        });\r\n    }\r\n\trender() {\r\n        const {customers, isLoading} = this.state;\r\n\r\n        if (isLoading) {\r\n            return <p>Loading...</p>;\r\n        }\r\n\r\n        const customerList = customers.map(customer => {\r\n            return(\r\n            <tr key={customer.id}>\r\n                <td style={{whiteSpace: 'nowrap'}}><Link to={\"/customer/\" + customer.id} params={{id:customer.id}}>{customer.name}</Link></td>\r\n                <td>{customer.ssn}</td>\r\n                <td>\r\n                </td>\r\n            </tr>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div size=\"sm\">\r\n                <Container fluid>\r\n                <Table  hover size=\"sm\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th >Name</th>\r\n                        <th >SSN</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {customerList}\r\n                    </tbody>\r\n                </Table>\r\n\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementList.js",["61","62"],"import React, {Component} from 'react';\r\nimport Agreement from \"./Agreement\"\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default class  AgreementList extends Component  {\r\n\r\n    state= {\r\n        agreements: [],\r\n        isLoading: false,\r\n\t};\r\n\r\n    componentDidMount() {\r\n        this.setState({isLoading: true});\r\n        fetch('/api/agreements')\r\n            .then(response => response.json())\r\n            .then(data => this.setState({agreements: data, isLoading: false}));\r\n        console.log(\"agreements \" + this.state.agreements)\r\n    }\r\n\r\n\r\n\trender() {\r\n        const {agreements, isLoading} = this.state;\r\n\r\n        if (isLoading) {\r\n            return <p>Loading...</p>;\r\n        }\r\n\r\n        const agreementList = agreements.map(agreement => {\r\n            return(\r\n                <tr key={agreement.id}>\r\n                    <td style={{whiteSpace: 'nowrap'}} >{agreement.id}</td>\r\n                    <td>{agreement.agreementType}</td>\r\n                    <td>{agreement.customer.name}</td>\r\n                    <td>{agreement.startDateTime}</td>\r\n                </tr>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div>\r\n            {this.state.agreements.length > 0 &&<div>\r\n                <h1>Agreements</h1>\r\n                <div size=\"sm\">\r\n                    <Container fluid>\r\n                        <Table  hover size=\"sm\">\r\n                            <thead>\r\n                            <tr>\r\n                                <th >ID</th>\r\n                                <th >Type</th>\r\n                                <th >Customer</th>\r\n                                <th >Start date</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {agreementList}\r\n                            </tbody>\r\n                        </Table>\r\n\r\n                    </Container>\r\n                </div>\r\n\r\n            </div>}\r\n                {this.state.agreements.length ==0 &&<div>\r\n                    <h1>Agreements</h1>\r\n                    <p>Nothing to display</p>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementServiceList.js",["63","64"],"import React, {Component} from 'react';\r\nimport AgreementService from \"./AgreementService\"\r\nimport {Container, Table} from \"reactstrap\";\r\n\r\nexport default class  AgreementServiceList extends Component  {\r\n\r\n    state= {\r\n        services: [],\r\n        isLoading: false,\r\n\t};\r\n\r\n    componentDidMount() {\r\n        this.setState({isLoading: true});\r\n        fetch('/api/agreementServices')\r\n            .then(response => response.json())\r\n            .then(data => this.setState({services: data, isLoading: false}));\r\n\r\n    }\r\n\r\n\r\n\trender() {\r\n        const {services, isLoading} = this.state;\r\n\r\n        if (isLoading) {\r\n            return <p>Loading...</p>;\r\n        }\r\n\r\n        const serviceList = services.map(service => {\r\n            return(\r\n                <tr key={service.id}>\r\n\r\n                    <td>{service.serviceType}</td>\r\n                    <td>{service.agreement.id}</td>\r\n                    <td>{service.agreement.customer.name}</td>\r\n                    <td>{service.serviceFee}</td>\r\n                </tr>\r\n            )\r\n        });\r\n\r\n        return (\r\n\r\n            <div>\r\n                {this.state.services.length > 0 &&<div>\r\n                    <h1>Services</h1>\r\n                    <div size=\"sm\">\r\n                        <Container fluid>\r\n                            <Table  hover size=\"sm\">\r\n                                <thead>\r\n                                <tr>\r\n\r\n                                    <th >Type</th>\r\n                                    <th >Agreement</th>\r\n                                    <th>Customer</th>\r\n                                    <th >Fee</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {serviceList}\r\n                                </tbody>\r\n                            </Table>\r\n\r\n                        </Container>\r\n                    </div>\r\n\r\n                </div>}\r\n                {this.state.services.length ==0 &&<div>\r\n                    <h1>Services</h1>\r\n                    <p>Nothing to display</p>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Agreement.js",["65","66","67"],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Customer.js",[],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AppNavBar.js",[],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\CustomerEdit.js",["68"],"import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport AppNavBar from './AppNavBar';\r\n\r\nexport default class CustomerEdit extends Component {\r\n\r\n    emptyItem = {\r\n        name: '',\r\n        ssn: '',\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            item: this.emptyItem\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        console.log(\"hello\")\r\n        console.log(\"id\" +this.props.match.params.id);\r\n        if (this.props.match.params.id !== 'new') {\r\n            const customer = await (await fetch(`/api/${Number(this.props.match.params.id)}`)).json();\r\n            this.setState({item: customer});\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let item = {...this.state.item};\r\n        item[name] = value;\r\n        this.setState({item});\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const {item} = this.state;\r\n\r\n        await fetch('/api/customer' + (item.id ? '/' + item.id : ''), {\r\n            method: (item.id) ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item),\r\n        });\r\n        this.props.history.push('/customers');\r\n    }\r\n\r\n    render() {\r\n        const {item} = this.state;\r\n        const title = <h2>{item.id ? 'Edit customer' : 'Add customer'}</h2>;\r\n\r\n        return <div>\r\n\r\n            <Container>\r\n                {title}\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"name\">Name</Label>\r\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\r\n                               onChange={this.handleChange} autoComplete=\"name\"/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"ssn\">SSN</Label>\r\n                        <Input type=\"text\" name=\"ssn\" id=\"ssn\" value={item.ssn || ''}\r\n                               onChange={this.handleChange} />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/customers\">Cancel</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    }\r\n}\r\n\r\n//export default withRouter(CustomerEdit);\r\n",["69","70"],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Home.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":13,"column":9,"nodeType":"77","messageId":"78","endLine":13,"endColumn":16},{"ruleId":"75","severity":1,"message":"79","line":2,"column":10,"nodeType":"77","messageId":"78","endLine":2,"endColumn":16},{"ruleId":"75","severity":1,"message":"80","line":2,"column":18,"nodeType":"77","messageId":"78","endLine":2,"endColumn":29},{"ruleId":"75","severity":1,"message":"81","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":17},{"ruleId":"82","severity":1,"message":"83","line":63,"column":47,"nodeType":"84","messageId":"85","endLine":63,"endColumn":49},{"ruleId":"75","severity":1,"message":"86","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":24},{"ruleId":"82","severity":1,"message":"83","line":66,"column":45,"nodeType":"84","messageId":"85","endLine":66,"endColumn":47},{"ruleId":"75","severity":1,"message":"87","line":45,"column":15,"nodeType":"77","messageId":"78","endLine":45,"endColumn":20},{"ruleId":"75","severity":1,"message":"88","line":46,"column":15,"nodeType":"77","messageId":"78","endLine":46,"endColumn":19},{"ruleId":"75","severity":1,"message":"89","line":47,"column":15,"nodeType":"77","messageId":"78","endLine":47,"endColumn":18},{"ruleId":"75","severity":1,"message":"90","line":4,"column":8,"nodeType":"77","messageId":"78","endLine":4,"endColumn":17},{"ruleId":"71","replacedBy":"91"},{"ruleId":"73","replacedBy":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'padding' is assigned a value but never used.","Identifier","unusedVar","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'Agreement' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'AgreementService' is defined but never used.","'value' is assigned a value but never used.","'type' is assigned a value but never used.","'fee' is assigned a value but never used.","'AppNavBar' is defined but never used.",["93"],["94"],"no-global-assign","no-unsafe-negation"]