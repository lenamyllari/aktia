[{"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\index.js":"1","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementService.js":"3","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\App.js":"4","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\CustomerList.js":"5","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementList.js":"6","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementServiceList.js":"7","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Agreement.js":"8","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Customer.js":"9","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AppNavBar.js":"10","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\CustomerEdit.js":"11","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Home.js":"12"},{"size":500,"mtime":1611766916188,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1611766916188,"results":"15","hashOfConfig":"14"},{"size":293,"mtime":1612008129171,"results":"16","hashOfConfig":"14"},{"size":838,"mtime":1612041680167,"results":"17","hashOfConfig":"14"},{"size":2759,"mtime":1612041192928,"results":"18","hashOfConfig":"14"},{"size":858,"mtime":1612001878699,"results":"19","hashOfConfig":"14"},{"size":930,"mtime":1612008057457,"results":"20","hashOfConfig":"14"},{"size":281,"mtime":1612007357788,"results":"21","hashOfConfig":"14"},{"size":179,"mtime":1612000365664,"results":"22","hashOfConfig":"14"},{"size":1536,"mtime":1612017113921,"results":"23","hashOfConfig":"14"},{"size":2818,"mtime":1612035741910,"results":"24","hashOfConfig":"14"},{"size":238,"mtime":1612035234854,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1bado01",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\index.js",[],["57","58"],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementService.js",[],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\App.js",["59"],"import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport AppNavBar from \"../src/Components/AppNavBar\";\nimport CustomerList from \"./Components/CustomerList\";\nimport CustomerEdit from \"./Components/CustomerEdit\";\nimport Home from \"./Components/Home\";\n\nfunction App() {\n  const padding = {\n    padding: 20,\n    fontSize: 50,\n  };\n\n\n  return (\n    <div className=\"mystyle\" >\n      <AppNavBar/>\n        <Router>\n            <Switch>\n                <Route path='/' exact={true} component={Home}/>\n                <Route path='/customers' component={CustomerList}/>\n                <Route path='/customers/new'  component={CustomerEdit}/>\n                <Route path='/customers/:id' component={CustomerEdit}/>\n            </Switch>\n        </Router>\n      </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\CustomerList.js",["60"],"import React, {Component} from 'react';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default class  CustomerList extends Component  {\r\n\r\n    state= {\r\n        customers: [],\r\n        isLoading: false,\r\n\t};\r\n\r\n/*\tstatic getDerivedStateFromProps(props, state) {\r\n        if (props.customers !== state.customers) {\r\n            return {\r\n                customers: props.customers,\r\n            };\r\n        }\r\n        // Return null to indicate no change to state.\r\n        return null;\r\n    }*/\r\n\r\n   componentDidMount() {\r\n        this.setState({isLoading: true});\r\n        fetch('/api/customers')\r\n            .then(response => response.json())\r\n            .then(data => this.setState({customers: data, isLoading: false}));\r\n        console.log(\"customers \" + this.state.customers)\r\n    }\r\n\r\n    async remove(id) {\r\n        await fetch(`/api/customer/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(() => {\r\n            let updatedCustomers = [...this.state.customers].filter(i => i.id !== id);\r\n            this.setState({customers: updatedCustomers});\r\n        });\r\n    }\r\n\trender() {\r\n        const {customers, isLoading} = this.state;\r\n\r\n        if (isLoading) {\r\n            return <p>Loading...</p>;\r\n        }\r\n\r\n        const customerList = customers.map(customer => {\r\n            return(\r\n            <tr key={customer.id}>\r\n                <td style={{whiteSpace: 'nowrap'}} >{customer.name}</td>\r\n                <td>{customer.ssn}</td>\r\n                <td>\r\n                    <ButtonGroup>\r\n                        <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/customers/\" + customer.id}>Edit</Button>\r\n                        <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(customer.id)}>Delete</Button>\r\n                    </ButtonGroup>\r\n                </td>\r\n            </tr>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div>\r\n\r\n                <div className=\"float-right\">\r\n                    <Button color=\"success\" tag={Link} to=\"/customers/new\">Add customer</Button>\r\n                </div>\r\n                <Table className=\"mt-4\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th width=\"20%\">Name</th>\r\n                        <th width=\"20%\">SSN</th>\r\n                        <th width=\"10%\">Actions</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {customerList}\r\n                    </tbody>\r\n                </Table>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementList.js",[],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AgreementServiceList.js",[],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Agreement.js",[],["61","62"],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Customer.js",["63"],"import React, {Component} from 'react';\r\n\r\nconst Customer = ({customer}) => {  \r\n\r\n     return ( <div>\r\n\t\t<p> {customer.name} </p>\r\n        </div>\r\n\t )\r\n}\r\nexport default Customer",["64","65"],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\AppNavBar.js",[],"C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\CustomerEdit.js",["66"],"import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport AppNavBar from './AppNavBar';\r\n\r\nexport default class CustomerEdit extends Component {\r\n\r\n    emptyItem = {\r\n        name: '',\r\n        ssn: '',\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            item: this.emptyItem\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        console.log(\"hello\")\r\n        console.log(\"id\" +this.props.match.params.id);\r\n        if (this.props.match.params.id !== 'new') {\r\n            const customer = await (await fetch(`/api/${Number(this.props.match.params.id)}`)).json();\r\n            this.setState({item: customer});\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let item = {...this.state.item};\r\n        item[name] = value;\r\n        this.setState({item});\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const {item} = this.state;\r\n\r\n        await fetch('/api/customer' + (item.id ? '/' + item.id : ''), {\r\n            method: (item.id) ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item),\r\n        });\r\n        this.props.history.push('/customers');\r\n    }\r\n\r\n    render() {\r\n        const {item} = this.state;\r\n        const title = <h2>{item.id ? 'Edit customer' : 'Add customer'}</h2>;\r\n\r\n        return <div>\r\n\r\n            <Container>\r\n                {title}\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"name\">Name</Label>\r\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\r\n                               onChange={this.handleChange} autoComplete=\"name\"/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"ssn\">SSN</Label>\r\n                        <Input type=\"text\" name=\"ssn\" id=\"ssn\" value={item.ssn || ''}\r\n                               onChange={this.handleChange} />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/customers\">Cancel</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    }\r\n}\r\n\r\n//export default withRouter(CustomerEdit);\r\n","C:\\Users\\Lena\\eclipse-workspace\\aktia_task\\frontend\\src\\Components\\Home.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":9,"column":9,"nodeType":"73","messageId":"74","endLine":9,"endColumn":16},{"ruleId":"71","severity":1,"message":"75","line":2,"column":31,"nodeType":"73","messageId":"74","endLine":2,"endColumn":40},{"ruleId":"67","replacedBy":"76"},{"ruleId":"69","replacedBy":"77"},{"ruleId":"71","severity":1,"message":"78","line":1,"column":16,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"67","replacedBy":"79"},{"ruleId":"69","replacedBy":"80"},{"ruleId":"71","severity":1,"message":"81","line":4,"column":8,"nodeType":"73","messageId":"74","endLine":4,"endColumn":17},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'padding' is assigned a value but never used.","Identifier","unusedVar","'Container' is defined but never used.",["82"],["83"],"'Component' is defined but never used.",["82"],["83"],"'AppNavBar' is defined but never used.","no-global-assign","no-unsafe-negation"]